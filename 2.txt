git config -global user.email ""
git user.name ""
==============================
✅ Program 1a: Initialize Git and First Commit
==============================
Step 1: Initialize a new Git repository  
git init project1

Step 2: Move into the directory  
cd project1

Step 3: Create a new file  
touch helloworld.c

Step 4: Check Git status  
git status

Step 5: Add the file to staging area  
git add helloworld.c

Step 6: Commit the file  
git commit -m "first comment"

Step 7: View commit log  
git log

Step 8: View file changes (if edited later)  
git diff helloworld.c

==============================
✅ Program 1b: Create and Merge Branches
==============================
Step 1: Create and switch to new branch  
git checkout -b feature-branch

Step 2: Switch back to master  
git checkout master

Step 3: Merge feature-branch into master  
git merge feature-branch

Step 4: Delete feature-branch  
git branch -d feature-branch

==============================
✅ Program 2a: Git Stash and Apply
==============================
Step 1: Check current branch  
git branch

Step 2: Edit any file (e.g., Login.html) and check status  
git status

Step 3: Stash changes with message  
git stash save "My stash"

Step 4: View stash list  
git stash list

Step 5: Show specific stash  
git stash show stash@{0}

Step 6: Switch to another branch  
git checkout your-desired-branch

Step 7: Apply stash  
git stash apply

Step 8: Drop the stash  
git stash drop

Step 9: (Optional) Clear all stashes  
git stash clear

==============================
✅ Program 2b: Clone a Remote Repository
==============================
Step 1: Copy the HTTPS URL from GitHub

Step 2: Run clone command  
git clone https://github.com/username/repo.git

Step 3: Move into the cloned directory  
cd repo

==============================
✅ Program 3a: Fetch and Rebase from Remote
==============================
Step 1: Fetch updates from remote  
git fetch

Step 2: Pull changes to local branch  
git pull origin main

Step 3: Confirm current branch  
git branch

Step 4: Modify a file and commit  
echo "update" >> test.txt  
git add test.txt  
git commit -m "local update"

Step 5: Push to remote  
git push

Step 6: Rebase onto updated branch  
git rebase origin/your-branch

Step 7: Force push if needed  
git push origin your-branch --force

==============================
✅ Program 3b: Merge with Custom Commit Message
==============================
Step 1: Merge feature branch with custom message  
git merge feature-branch -m "Custom merge message"

Step 2: If conflict occurs, resolve it and run  
git add .  
git merge --continue

Step 3: (Optional) Edit commit message interactively  
git merge feature-branch --no-ff -e

==============================
✅ Program 4a: Create and Push Git Tag
==============================
Step 1: Create tag for latest commit  
git tag v1.0

Step 2: (Or) Create tag for specific commit  
git tag v1.0 <commit_hash>

Step 3: Push tag to remote  
git push origin v1.0

==============================
✅ Program 4b: Cherry-pick Range of Commits
==============================
Step 1: View branches  
git branch

Step 2: Switch to source branch and note commits  
git checkout source-branch

Step 3: Switch to target branch  
git checkout main

Step 4: Cherry-pick range  
git cherry-pick <start_commit>^..<end_commit>

Step 5: Abort cherry-pick (if needed)  
git cherry-pick --abort

==============================
✅ Program 5a: Show Commit Details
==============================
Step 1: Show commit with ID  
git show <commit-id>

==============================
✅ Program 5b: List Commits by Author and Date Range
==============================
Step 1: Use log command with filters  
git log --author="JohnDoe" --since="2023-01-01" --until="2023-12-31"

==============================
✅ Program 6a: View Last 5 Commits and Undo One
==============================
Step 1: View last 5 commits  
git log -n 5

Step 2: View in short format  
git log -n 5 --oneline

Step 3: Revert commit by ID  
git revert abc123

==============================
✅ Program 6b: Create Git Aliases
==============================
Step 1: Create alias for git status  
git config --global alias.st status

Step 2: Create alias for log graph  
git config --global alias.lg "log --oneline --graph"

Step 3: Verify all aliases  
git config --global --list

==============================
✅ Program 7a: Revert a Merge Commit
==============================
Step 1: Initialize repo and commit  
git init  
echo "Initial" > file.txt  
git add .  
git commit -m "Initial commit"

Step 2: Create feature branch and commit  
git checkout -b feature  
echo "Feature work" >> file.txt  
git add .  
git commit -m "Work on feature"

Step 3: Merge into main  
git checkout main  
git merge feature -m "Merge feature into main"

Step 4: Get merge commit ID  
git log --oneline

Step 5: Revert merge commit  
git revert -m 1 <merge_commit_hash>

==============================
✅ Program 7b: Recover Deleted Branch with Reflog
==============================
Step 1: Create branch and commit  
git checkout -b test-branch  
echo "Hello" > file.txt  
git add file.txt  
git commit -m "Added file.txt"

Step 2: Delete branch  
git checkout main  
git branch -D test-branch

Step 3: View reflog  
git reflog

Step 4: Restore branch  
git checkout -b test-branch <commit_hash_from_reflog>

==============================
✅ Program 8a: Git Clean to Remove Untracked Files
==============================
Step 1: Create untracked files  
touch temp1.txt temp2.log notes.md  
mkdir tempdir  
touch tempdir/file1.txt

Step 2: Check untracked files  
git status

Step 3: Dry-run to preview  
git clean -n

Step 4: Clean files  
git clean -f

==============================
✅ Program 8b: Create Archive of Branch or Commit
==============================
Step 1: Create zip of branch  
git archive --format=zip --output=main.zip main

Step 2: Create tar of branch  
git archive --format=tar --output=main.tar main

Step 3: Archive a specific commit  
git log --oneline  
git archive --format=zip --output=commit.zip <commit_hash>

==============================
✅ Program 9: Install Jenkins on Windows
==============================
Step 1: Install JDK 17 and set JAVA_HOME

Step 2: Download Jenkins WAR from https://www.jenkins.io

Step 3: Open command prompt and run Jenkins  
java -jar jenkins.war

Step 4: Visit Jenkins in browser  
http://localhost:8080

Step 5: Enter admin password from terminal

Step 6: Click “Install Suggested Plugins”

Step 7: Create admin user → Save and Finish

Step 8: Click “Start using Jenkins”

==============================
✅ Program 10a: Create New Jenkins Job
==============================
Step 1: Open Jenkins dashboard  
Click “New Item”

Step 2: Enter job name and select type (Freestyle / Pipeline)  
Click OK

Step 3: Configure job → Save

Step 4: Click “Build Now”

Step 5: Click “Console Output” to view result

==============================
✅ Program 10b: Create Jenkins Pipeline Job
==============================
Step 1: Open Jenkins dashboard  
Click “New Item”

Step 2: Enter job name  
Select “Pipeline” and click OK

Step 3: Scroll down to Pipeline section  
Paste this script as example:
-------------------------
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building project...'
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying application...'
            }
        }
    }
}
-------------------------

Step 4: Save and click “Build Now”  
Step 5: View console output to see results
